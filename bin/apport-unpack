#!/usr/bin/python3

# Extract the fields of a problem report into separate files into a new or
# empty directory.
#
# Copyright (c) 2006 Canonical Ltd.
# Author: Martin Pitt <martin.pitt@ubuntu.com>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.  See http://www.gnu.org/copyleft/gpl.html for
# the full text of the license.

import argparse
import gettext
import gzip
import os
import sys

import problem_report
from apport import fatal
from apport import unicode_gettext as _


def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        usage=_("%(prog)s <report> <target directory>")
    )
    parser.add_argument("report", help=_("Report file to unpack"))
    parser.add_argument(
        "target_directory", help=_("directory to unpack report to")
    )
    return parser.parse_args()


gettext.textdomain("apport")
args = parse_args()

# ensure that the directory does not yet exist or is empty
try:
    if os.path.isdir(args.target_directory):
        if os.listdir(args.target_directory):
            fatal(_("Destination directory exists and is not empty."))
    else:
        os.mkdir(args.target_directory)
except OSError as error:
    fatal(str(error))

bin_keys = []
pr = problem_report.ProblemReport()
if args.report == "-":
    pr.load(sys.stdin, binary=False)
else:
    try:
        if args.report.endswith(".gz"):
            with gzip.open(args.report, "rb") as f:
                pr.load(f, binary=False)
        else:
            with open(args.report, "rb") as f:
                pr.load(f, binary=False)
    except OSError as error:
        fatal(str(error))
for k in pr:
    if pr[k] == "":
        bin_keys.append(k)
        continue
    with open(os.path.join(args.target_directory, k), "wb") as f:
        if isinstance(pr[k], str):
            f.write(pr[k].encode("UTF-8"))
        else:
            f.write(pr[k])
try:
    if args.report.endswith(".gz"):
        with gzip.open(args.report, "rb") as f:
            pr.extract_keys(f, bin_keys, args.target_directory)
    else:
        with open(args.report, "rb") as f:
            pr.extract_keys(f, bin_keys, args.target_directory)
except OSError as error:
    fatal(str(error))
